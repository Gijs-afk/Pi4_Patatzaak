@model Pi4_Patatzaak.Models.Order

@{
    ViewData["Title"] = "Create";
}

<h2>Create Order</h2>

<form asp-controller="Orders" asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.CustomerID)
    @Html.HiddenFor(model => model.Status)

    <h4>Select Products:</h4>

    <table class="table" id="productTable">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < Model.Orderlines.Count; i++)
            {
                <tr>
                    <td>
                        @Html.DropDownListFor(model => model.Orderlines[i].ProductID, (SelectList)ViewBag.ProductList, "Select a product", new { @class = "product-dropdown" })
                    </td>
                    <td>
                        <input type="number" asp-for="Orderlines[i].Amount" placeholder="Quantity" />
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button type="submit">Place Order</button>

    <button type="button" id="addProduct">Add Product</button>
</form>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Define product prices from the ViewBag as JSON
            var productPrices = @Html.Raw(Json.Serialize(ViewBag.ProductPrices));

            $(".product-dropdown").change(function () {
                var rowIndex = $(this).closest("tr").index();
                var selectedProduct = $(this).val();
                var quantity = $(this).closest("tr").find('input[type="number"]').val();
                var productPrice = productPrices[selectedProduct];

                // Calculate the updated price
                var updatedPrice = quantity * productPrice;

                // Update the price span
                $("#actual-price-" + rowIndex).text("Price: $" + updatedPrice.toFixed(2));
            });

            $("input[type='number']").on("input", function () {
                var rowIndex = $(this).closest("tr").index();
                var selectedProduct = $(this).closest("tr").find('.product-dropdown').val();
                var quantity = $(this).val();
                var productPrice = productPrices[selectedProduct];

                // Calculate the updated price
                var updatedPrice = quantity * productPrice;

                // Update the price span
                $("#actual-price-" + rowIndex).text("Price: $" + updatedPrice.toFixed(2));
            });

            $("#addProduct").click(function () {
                var newRow = $("#productTable tbody tr:last").clone();

                // Clear the price span for the new row
                newRow.find('.product-price').text('');

                // Clear the quantity input
                newRow.find('input[type="number"]').val('');

                // Append the new row to the table
                $("#productTable tbody").append(newRow);
            });
        });

    </script>
}
